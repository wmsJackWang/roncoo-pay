spring:
  main:
# sharding-jdbc定义了重复的dataSource数据源bean，启动时必须添加以下值
    allow-bean-definition-overriding: true
# sharding-jdbc 分库、分表配置
  shardingsphere:
    datasource:
      names: ds0,ds1
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
#        url: jdbc:mysql://10.18.93.13:3308/myutilproject0?characterEncoding=GBK&useSSL=false
#        username: root
#        password: jackdking@1234
        url: jdbc:mysql://bittechblog.com:3308/myutilproject0?characterEncoding=GBK&useSSL=false
        username: root
        password: wanyang@wms
        driver-class-name: com.mysql.jdbc.Driver
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
#        url: jdbc:mysql://10.18.93.13:3308/myutilproject1?characterEncoding=GBK&useSSL=false
#        username: root
#        password: jackdking@1234
        url: jdbc:mysql://bittechblog.com:3308/myutilproject1?characterEncoding=GBK&useSSL=false
        username: root
        password: wanyang@wms
        driver-class-name: com.mysql.jdbc.Driver
    sharding:
      tables:
        TransInfo:
          actual-data-nodes: ds$->{0..1}.TransInfo$->{0..1}
          database-strategy:
            standard:
              precise-algorithm-class-name: org.jackdking.shardjdbcyaml.algorithm.SuperDbShardingAlgorithm
              sharding-column: orderid
          table-strategy:
            standard:
              precise-algorithm-class-name: org.jackdking.shardjdbcyaml.algorithm.SuperTableShardingAlgorithm
              sharding-column: orderid
#            inline:
#              #分片规则对应列，即以user_id值作为分片规则的列
#              sharding-column: orderid
#              #分片按user_id列和10取模运算，路由到对应的order0...9的表
#              algorithm-expression: TransInfo$->{orderid % 2}
          key-generator:
            column: id
            type: SNOWFLAKE
#      default-database-strategy:
#        standard:
#          precise-algorithm-class-name: org.jackdking.shardjdbcyaml.algorithm.SuperTableShardingAlgorithm
#          sharding-column: orderid
#        inline:
#          sharding-column: id
#          algorithm-expression: ds$->{id % 2}
    props:
      sql.show: true      
          
    redis: 
        database: 0 
        host: mpt.zw.redis.sohucs.com
        password: fda86f1d38a542f6b05cb68bd00c9606 
        port: 22060 
        #port: 6379 
        pool: 
            max-idle: 40 
            min-idle: 10
            max-active: 50 
            max-wait: -1    
renewal: 
        status: start
        keys: redpacket_renewal_key
        time: 30
        step: 5 
redpacket: 
        batch: 20
        waitTime: 5000
        testTime: 300
        testWaitTime: 5000
block: 
     queue: 
        corepoolsize: 20
        maxpoolsize: 20
        allow: true 
        keepalivetime: 60
        queuecapacity: 20
#javamelody
javamelody: 
    init-parameters: 
        log: true 
        authorized-users: wallet:abc123456 
        storage-directory: ${log.path.prefix}/javamelody 
        monitoring-path: /see 
stats: 
    projectName: wallet-redservice.dev
    ip: 10.11.152.59
    port: 8125
